{"version":3,"sources":["utils/validators/validators.js","components/common/FormsControls/FormsControls.js","components/common/FormsControls/FormsControls.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogsItem/DialogsItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","FormControl","input","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","restProps","child","Input","createField","placeholder","name","validators","component","text","validate","module","exports","DialogItem","path","id","s","dialog","to","activeClassName","active","Message","message","maxLength50","reduxForm","form","onSubmit","handleSubmit","Field","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","messagesElements","messages","newTextElement","newMessageBody","React","createRef","isAuth","dialogsItems","values","sendMessage","change","ref","onClick","current","alert","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this"],"mappings":"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","file":"static/js/5.27864d8d.chunk.js","sourcesContent":["\r\n\r\n\r\nexport const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n\r\n}\r\n\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + \"\" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return (<FormControl {...props}><textarea {...input} {...restProps} /></FormControl>)\r\n}\r\n\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return (<FormControl {...props}><input {...input} {...restProps} /></FormControl>)\r\n\r\n\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3LFUW\",\"error\":\"FormsControls_error__3g_Tg\",\"formSummaryError\":\"FormsControls_formSummaryError__1Ylbz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2pXW_\",\"dialogsItems\":\"Dialogs_dialogsItems__3QRD1\",\"dialog\":\"Dialogs_dialog__3PxlM\",\"active\":\"Dialogs_active__2mus9\",\"messages\":\"Dialogs_messages__gyk0S\",\"message\":\"Dialogs_message__TGulw\",\"change\":\"Dialogs_change__3C82t\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n\r\n    return (\r\n        <div className={s.message}> {props.message}</div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Message;","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport React from \"react\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       name={\"newMessageBody\"} placeholder={\"Enter you message\"}/>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({form: \"dialogAddMessageForm\"}) (AddMessageForm);\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogsItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport createReduxForm from \"redux-form/lib/createReduxForm\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>);\r\n    let messagesElements = state.messages.map(message => <Message message={message.message} key={message.id}/>);\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n\r\n    let newTextElement = React.createRef(); //moi dorobotki codu\r\n    let addText = () => {\r\n        let text = newTextElement.current.value;\r\n        alert(text);\r\n    }\r\n\r\n\r\n    let addNewMesage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                <h1>\r\n                    {dialogsElements}\r\n                </h1>\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <h1>\r\n                    <div>{messagesElements}</div>\r\n\r\n\r\n                    <AddMessageForm onSubmit={addNewMesage}/>\r\n\r\n\r\n                </h1>\r\n            </div>\r\n            <div className={s.change}>\r\n                <center>\r\n                    <textarea ref={newTextElement}></textarea>\r\n                    <div>\r\n                        <button onClick={addText}>Add TEXT</button>\r\n                    </div>\r\n                </center>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"}  />;\r\n            return <Component {...this.props} />\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent);\r\n\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogsItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {sendMessageCreator } from \"../../Redux/dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n) (Dialogs);"],"sourceRoot":""}