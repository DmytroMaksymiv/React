{"version":3,"sources":["utils/validators/validators.js","components/common/FormsControls/FormsControls.js","components/common/FormsControls/FormsControls.module.css","components/Login/Login.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","FormControl","input","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","restProps","child","Input","createField","placeholder","name","validators","component","text","validate","module","exports","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","style","formSummaryError","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"sHAGA,oEAAO,IAAMA,EAAW,SAAAC,GACpB,IAAIA,EACJ,MAAO,qBAMEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,4MCN5BE,EAAc,SAAC,GAA8C,EAA7CC,MAA8C,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SAC3CC,EAAWH,GAAWC,EAE5B,OACI,sBAAKG,UAAWC,IAAOC,YAAc,IAAMH,EAAWE,IAAOJ,MAAQ,IAArE,UACI,8BACKC,IAEJC,GAAY,+BAAOF,QAMnBM,EAAW,SAACC,GAAW,IACzBV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBE,MADW,YACYF,EADZ,2BAE/B,OAAQ,cAACX,EAAD,2BAAiBW,GAAjB,aAAwB,oDAAcV,GAAWW,QAIhDE,EAAQ,SAACH,GAAW,IACtBV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBE,MADQ,YACeF,EADf,2BAE5B,OAAQ,cAACX,EAAD,2BAAiBW,GAAjB,aAAwB,iDAAWV,GAAWW,QAK7CG,EAAc,SAACC,EAAaC,EAAMC,EAAYC,GAAhC,IAA2CR,EAA3C,uDAAmD,GAAIS,EAAvD,uDAA8D,GAA9D,OACvB,gCACI,cAAC,IAAD,aAAOJ,YAAaA,EAAaC,KAAMA,EAChCI,SAAUH,EACVC,UAAWA,GACPR,IAJf,IAKQS,O,oBCtCZE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,8HC6BrHC,EAAiBC,YAAU,CAC7BC,KAAM,SADaD,EApBL,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcvB,EAAW,EAAXA,MAC9B,OACI,uBAAMwB,SAAUD,EAAhB,UAEKZ,YAAY,QAAS,QAAS,CAACpB,KAAWmB,KAC1CC,YAAY,WAAY,WAAY,CAACpB,KAAWmB,IAAO,CAACe,KAAM,aAC9Dd,YAAY,KAAM,aAAc,GAAID,IAAO,CAACe,KAAM,YAAa,eAG/DzB,GAAS,qBAAKG,UAAWuB,IAAMC,iBAAtB,SACL3B,IAGL,8BACI,mDAkCD4B,uBALS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,UAIiB,CAACE,WAA1BJ,EAxBD,SAACrB,GAMX,OAAIA,EAAMuB,OACC,cAAC,IAAD,CAAUG,GAAI,aAIrB,gCACI,uCACA,cAACb,EAAD,CAAgBI,SAXP,SAACU,GACd3B,EAAMyB,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/6.774514ad.chunk.js","sourcesContent":["\r\n\r\n\r\nexport const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n\r\n}\r\n\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + \"\" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return (<FormControl {...props}><textarea {...input} {...restProps} /></FormControl>)\r\n}\r\n\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return (<FormControl {...props}><input {...input} {...restProps} /></FormControl>)\r\n\r\n\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3LFUW\",\"error\":\"FormsControls_error__3g_Tg\",\"formSummaryError\":\"FormsControls_formSummaryError__1Ylbz\"};","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../Redux/auth-reduser\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            {createField(\"Email\", \"email\", [required], Input)}\r\n            {createField(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({ // <----- THIS IS THE IMPORTANT PART!\r\n    form: 'login',                           // a unique name for this form\r\n})(LoginForm);\r\n\r\nconst Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}